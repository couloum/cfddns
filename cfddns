#!/bin/bash

# Load configuration
if [ -f /etc/cfddns.conf ]; then
  source /etc/cfddns.conf
fi

# LOGGER
log() {
    if [ "$1" ]; then
        echo -e "[$(date)] - $1" >> $log_file
    fi
}

id_file="/var/lib/cfddns/ids"
log_file="/var/log/cfddns.log"

if [ ! -d $(dirname $id_file) ]; then
  mkdir -p $(dirname $id_file)
  chmod 750 $(dirname $id_file)
  if [ $? -ne 0 ]; then
    echo "Cannot create directory $(dirname $id_file)" >&2
    exit 1
  fi
fi

touch $id_file
if [ $? -ne 0 ]; then
  echo "Cannot write into file $id_file" >&2
  exit 1
fi

for var in zone_name records pub_ip_discovery_url; do
  if [ -z "${!var}" ]; then
    echo "ERROR: parameter ${!var} is not defined." >&2
    exit 1
  fi
done

if [[ -z $auth_token ]]; then
  if [[ -z $auth_email ]] || [[ -z $auth_key ]]; then
    echo "ERROR: You must provide at least one authentication method. It can be 'auth_token' or 'auth_email'+'auth_key'" >&2
    exit 1
  else
    CURL_AUTH_HEADERS=("-H" "X-Auth-Email: $auth_email" "-H" "X-Auth-Key: $auth_key")
  fi
else
  CURL_AUTH_HEADERS=("-H" "Authorization: Bearer $auth_token")
fi

CURL_OPTS=("-s" "-H" "Content-Type: application/json")

ip=$(curl -s $pub_ip_discovery_url)

if [[ ! "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  log "ERROR: could not retrieve the public IP address of this host."
  exit 1
fi

# SCRIPT START

RECORDS_TO_UPDATE=()
for record in $records; do
  old_ip=$(grep -E "^record_ip_$record=" $id_file | cut -d= -f2)
  if [ "$ip" != "$old_ip" ]; then
    RECORDS_TO_UPDATE+=($record)
  fi
done

if [[ ${#RECORDS_TO_UPDATE[@]} -eq 0 ]]; then
  log "INFO: All records are up-to-date (ip: $ip)"
  exit 0
fi

log "INFO: The following record(s) need(s) to be updated: ${RECORDS_TO_UPDATE[*]}."

# Get zone identifier
zone_identifier=$(grep -E '^zone_identifier=' $id_file | cut -d= -f2)
if [[ -z "$zone_identifier" ]]; then
    zone_identifier=$(curl -X GET "https://api.cloudflare.com/client/v4/zones?name=$zone_name" "${CURL_OPTS[@]}" "${CURL_AUTH_HEADERS[@]}" | grep -Eo '"id":"[^"]+' | head -n1 | cut -d':' -f2 | tr -d '"')
    if [[ ! "$zone_identifier" =~ ^[0-9a-f]{32}$ ]]; then
      log "ERROR: zone identifier is not valid ($zone_identifier)."
      exit 1
    fi
    echo "zone_identifier=$zone_identifier" >> $id_file
fi

for record in "${RECORDS_TO_UPDATE[@]}"; do
  # Get record identifier
  record_identifier=$(grep -E "^record_identifier_$record=" $id_file | cut -d= -f 2)
  if [[ -z "$record_identifier" ]]; then
    record_identifier=$(curl -X GET "https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records?name=$record" "${CURL_OPTS[@]}" "${CURL_AUTH_HEADERS[@]}" | grep -Eo '"id":"[^"]+' | head -n1 | cut -d ':' -f2 | tr -d '"')
    if [[ ! "$record_identifier" =~ ^[0-9a-f]{32}$ ]]; then
      log "ERROR: Record identifier not found for record $record. Skipping it."
      continue
    fi
    echo "record_identifier_$record=$record_identifier" >> $id_file
  fi

  update=$(curl -X PUT "https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records/$record_identifier" "${CURL_OPTS[@]}" "${CURL_AUTH_HEADERS[@]}" --data "{\"id\":\"$zone_identifier\",\"type\":\"A\",\"name\":\"$record\",\"content\":\"$ip\"}")

  if [[ $update == *"\"success\":false"* ]]; then
    log "ERROR: Update failed for record $record. Cloudflare results dump:\n$update"
    continue
  else
    log "INFO: Record $record has been updated with IP $ip."
    sed -i "/^record_ip_$record=/d" $id_file
    echo "record_ip_$record=$ip" >> $id_file
  fi
done
